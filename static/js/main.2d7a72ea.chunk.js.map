{"version":3,"sources":["features/appSlice.js","SidebarChannel.jsx","features/userSlice.js","firebase.js","Sidebar.jsx","ChatHeader.js","Message.js","Chat.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","channelId","channelName","reducers","setChannelInfo","state","action","payload","actions","selectChannelID","app","selectChannelName","SidebarChannel","id","dispatch","useDispatch","className","onClick","userSlice","user","login","logout","selectUser","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Sidebar","useSelector","useState","channels","setChannels","useEffect","collection","onSnapshot","snapshot","docs","map","doc","channel","data","prompt","add","fontSize","Avatar","signOut","src","photo","displayName","uid","substring","ChatHeader","placeholder","Message","timestamp","message","Date","toDate","toUTCString","Chat","input","setInput","messages","setMessage","orderBy","value","disabled","onChange","e","target","type","preventDefault","FieldValue","serverTimestamp","Login","alt","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d7a72ea.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    channelId:null,\r\n    channelName:null,\r\n  },\r\n  reducers: {\r\n    setChannelInfo: (state,action) => {\r\n      state.channelId=action.payload.channelId;\r\n      state.channelName=action.payload.channelName;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\nexport const selectChannelID = (state) => state.app.channelId;\r\nexport const selectChannelName = (state) => state.app.channelName;\r\n\r\nexport default appSlice.reducer;\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { setChannelInfo } from './features/appSlice';\r\nimport \"./sidebarChannel.css\";\r\nfunction SidebarChannel({id, channelName}) {\r\n    const dispatch=useDispatch();\r\n\r\n    return (\r\n        <div className=\"sideChannel\" onClick={()=>dispatch (setChannelInfo({\r\n                 channelId:id,\r\n                 channelName:channelName,\r\n            })\r\n         )\r\n       }\r\n     >\r\n            <h4><span className=\"sidebarChannel_Hash\">#</span>{channelName}</h4>\r\n        </div>\r\n    )\r\n}\r\nexport default SidebarChannel\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user:null,\r\n  },\r\n  reducers: {\r\n    login: (state,action) => {\r\n      state.user=action.payload;\r\n    },\r\n    logout:(state)=>{\r\n      state.user=null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { login,logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCybeLP4XguhQ7y_86Y9gViMiibv6Z5nnU\",\r\n    authDomain: \"cordless-8ee2b.firebaseapp.com\",\r\n    projectId: \"cordless-8ee2b\",\r\n    storageBucket: \"cordless-8ee2b.appspot.com\",\r\n    messagingSenderId: \"668181147466\",\r\n    appId: \"1:668181147466:web:ef9597286433c8257a9bb3\",\r\n    measurementId: \"G-7R8JKR04RK\"\r\n  };\r\n\r\n  const firebaseapp=firebase.initializeApp(firebaseConfig);\r\n  const db=firebaseapp.firestore();\r\n  const auth=firebase.auth();\r\n  const provider=new firebase.auth.GoogleAuthProvider();\r\n\r\n  export {auth, provider};\r\n  export default db;","import React, { useEffect, useState } from 'react';\r\nimport \"./Sidebar.css\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport CallIcon from '@material-ui/icons/Call';\r\nimport {Avatar} from '@material-ui/core';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport HeadsetIcon from '@material-ui/icons/Headset';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport SidebarChannel from \"./SidebarChannel\";\r\nimport { selectUser } from './features/userSlice';\r\nimport { useSelector } from 'react-redux';\r\nimport db, { auth } from './firebase';\r\nfunction Sidebar() {\r\n    const user=useSelector(selectUser);\r\n    const [channels,setChannels]=useState([]);\r\n    \r\n    useEffect(()=> {\r\n        db.collection(\"channels\").onSnapshot((snapshot)=>\r\n            setChannels(\r\n               snapshot.docs.map((doc)=>({\r\n               id:doc.id,\r\n               channel:doc.data(),\r\n            }))\r\n        )\r\n     );\r\n    },[]);\r\n     const handleAddChannel=()=>{\r\n         const channelName=prompt(\"Enter New Channel Name\");\r\n\r\n         if(channelName){\r\n             db.collection(\"channels\").add({\r\n                 channelName:channelName,\r\n             });\r\n         }\r\n     };\r\n    return (\r\n        <div className=\"sidebar\">\r\n        <div className=\"sidebar-Top\">\r\n       <h1>CORDLESS</h1>\r\n       <ExpandMoreIcon />\r\n       </div>\r\n           \r\n        <div className=\"sidebar-Channel\">\r\n         <div className=\"sidebar_ChannelHeader\">\r\n             <div className=\"sidebar_Header\">\r\n             <ExpandMoreIcon />\r\n                <h1>Text Channels</h1>\r\n             </div>\r\n            <AddIcon onClick={handleAddChannel} className=\"sidebar_addchannel\"/>\r\n         </div>\r\n         <div className=\"sidebar_channelList\">\r\n          {channels.map(({id,channel})=>(\r\n            <SidebarChannel \r\n                key={id}\r\n                id={id}\r\n                channelName={channel.channelName}\r\n            />\r\n          ))}\r\n        </div>\r\n        </div>\r\n \r\n       <div className=\"sidebar_voice\">\r\n         <SignalCellularAltIcon  \r\n             className=\"sidebar_voiceIcon\"\r\n             fontSize=\"large\"\r\n         />\r\n         <div className=\"sidebar_voiceInfro\">\r\n             <h3>Voice Connected</h3>\r\n              <p>Stream</p>\r\n         </div>\r\n         <div className=\"sidebar_voiceIcon\">\r\n              <InfoIcon />\r\n              <CallIcon />\r\n         </div>\r\n       </div>\r\n           \r\n           <div className=\"sidebar_profile\">\r\n               <Avatar  onClick={()=>auth.signOut()}  src={user.photo}/>\r\n               <div className=\"sidebar_profileInfo\">\r\n                   <h3>{user.displayName}</h3>\r\n                   <p>#{user.uid.substring(0,5)}</p>\r\n               </div>\r\n               <div className=\"sidebar_profileIcon\">\r\n                  <MicIcon />\r\n                  <HeadsetIcon/>\r\n                  <SettingsIcon/>\r\n               </div>\r\n           </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import React from 'react'\r\nimport \"./chatHeader.css\";\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport EditLocationRoundedIcon from '@material-ui/icons/EditLocationRounded';\r\nimport PeopleAltRoundedIcon from '@material-ui/icons/PeopleAltRounded';\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport SendRoundedIcon from '@material-ui/icons/SendRounded';\r\nimport HelpRoundedIcon from '@material-ui/icons/HelpRounded';\r\nfunction ChatHeader({channelName}) {\r\n    return (\r\n        <div className=\"chatHeader\">\r\n            \r\n            <div className=\"chatHeader_left\">\r\n                <h3>\r\n                    <span className=\"chatHeader_hash\">#</span>\r\n                  {channelName}\r\n                </h3>  \r\n            </div>\r\n\r\n            <div className=\"chatHeader_right\">\r\n                <NotificationsIcon />\r\n                <EditLocationRoundedIcon />\r\n                <PeopleAltRoundedIcon />\r\n\r\n                <div className=\"chatHeader_search\">\r\n                    <input placeholder=\"Search\"/>\r\n                    <SearchRoundedIcon />\r\n                </div>\r\n                <SendRoundedIcon/>\r\n                <HelpRoundedIcon/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ChatHeader\r\n","import { Avatar } from '@material-ui/core';\r\nimport React from 'react'\r\nimport \"./Message.css\";\r\n\r\nfunction Message({timestamp,message,user}) {\r\n    return (\r\n        <div className=\"message\">\r\n            <Avatar src={user.photo} />\r\n            <div className=\"message_info\">\r\n                <h4>{user.displayName}\r\n                <span className=\"message_timestamp\">\r\n                {new Date(timestamp?.toDate()).toUTCString()}\r\n                </span>\r\n                </h4>\r\n                <p>{message}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Message\r\n","import React, { useEffect, useState } from 'react'\r\nimport \"./chat.css\";\r\nimport ChatHeader from './ChatHeader';\r\nimport AddCircleRoundedIcon from '@material-ui/icons/AddCircleRounded';\r\nimport CardGiftcardRoundedIcon from '@material-ui/icons/CardGiftcardRounded';\r\nimport GifRoundedIcon from '@material-ui/icons/GifRounded';\r\nimport EmojiEmotionsRoundedIcon from '@material-ui/icons/EmojiEmotionsRounded';\r\nimport Message from './Message';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from './features/userSlice';\r\nimport { selectChannelID, selectChannelName} from './features/appSlice';\r\nimport db from './firebase';\r\nimport firebase from \"firebase\";\r\nfunction Chat() {\r\n    const user=useSelector(selectUser);\r\n    const channelId=useSelector(selectChannelID);\r\n    const channelName=useSelector(selectChannelName);\r\n    const [input,setInput]=useState(\" \");\r\n    const [messages, setMessage]=useState([]);\r\n  \r\n\r\n  useEffect(()=>{\r\n     if(channelId){\r\n       db.collection(\"channels\")\r\n       .doc(channelId)\r\n       .collection(\"messages\")\r\n       .orderBy(\"timestamp\",\"asc\")\r\n       .onSnapshot((snapshot)=>\r\n         setMessage(snapshot.docs.map((doc)=>doc.data()))\r\n       );\r\n     }      \r\n  },[channelId])\r\n    \r\n  const sendMessage=e =>{\r\n    e.preventDefault();\r\n\r\n    db.collection(\"channels\").doc(channelId).collection(\"messages\").add({\r\n        timestamp:firebase.firestore.FieldValue.serverTimestamp(),\r\n        message:input,\r\n        user:user,\r\n    })\r\n    setInput(\" \");\r\n  }\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <ChatHeader channelName={channelName}/>\r\n\r\n            <div className=\"chat_messages\">\r\n            {messages.map((message)=>(\r\n              <Message \r\n                 timestamp={message.timestamp}\r\n                 message={message.message}\r\n                 user={message.user}\r\n              />\r\n            ))}\r\n            </div>\r\n            <div className=\"chat_input\">\r\n              <AddCircleRoundedIcon fontSize=\"large\"/>\r\n              <form >\r\n                  <input \r\n                    value={input} \r\n                    disabled={!channelId}\r\n                    onChange={(e)=>setInput(e.target.value)}\r\n                    placeholder=\"Messages\"/>\r\n                  <button \r\n                   disabled={!channelId}\r\n                   type=\"submit\"\r\n                   className=\"chat_button\"\r\n                   onClick={sendMessage}\r\n                   >\r\n                      SEND\r\n                  </button>\r\n              </form>\r\n            \r\n            <div className=\"chat_inputIcon\">\r\n              <CardGiftcardRoundedIcon fontSize=\"large\"/>\r\n              <GifRoundedIcon fontSize=\"large\"/>\r\n              <EmojiEmotionsRoundedIcon fontSize=\"large\"/>\r\n\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import { Button } from '@material-ui/core';\r\nimport React from 'react'\r\nimport { auth,provider } from './firebase';\r\nimport \"./Login.css\";\r\nfunction Login() {\r\n    const signIn=()=>{\r\n      auth.signInWithPopup(provider)\r\n      .catch((error)=>alert(error.message));\r\n    }\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login_logo\">\r\n                <img src=\"https://www.freepnglogos.com/uploads/discord-logo-png/discord-branding-2.png\" alt=\"DiscordIMG\"/>\r\n            </div>\r\n            <Button onClick={signIn}>\r\n                Sign In\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, {useEffect}from 'react';\r\nimport {useDispatch,useSelector} from \"react-redux\";\r\nimport './App.css';\r\nimport Sidebar from \"./Sidebar\";\r\nimport Chat from \"./Chat\";\r\nimport { logout,login} from './features/userSlice';\r\nimport { selectUser } from './features/userSlice';\r\nimport Login from \"./Login\";\r\nimport { auth } from './firebase';\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUser);\r\n \r\n\r\n useEffect(()=>{\r\n  auth.onAuthStateChanged((authUser)=>{\r\n     if(authUser){\r\n         dispatch(login({\r\n            uid:authUser.uid,\r\n            photo:authUser.photoURL,\r\n            email:authUser.email,\r\n            displayName:authUser.displayName,\r\n         })\r\n       );\r\n     }\r\n     else{\r\n              // user is not logged in\r\n              dispatch(logout());\r\n     }\r\n  });\r\n},[])\r\n  return (\r\n    <div className=\"app\">   \r\n      {user ? (\r\n        <>\r\n        <Sidebar />\r\n         <Chat />\r\n      </>\r\n     ):(\r\n       <Login/>\r\n     )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\nimport appReducer from '../features/appSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}